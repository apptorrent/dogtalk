/*! built for dogtalk 2013-10-01 */
angular.module("dogtalk",["ngSockethubClient","ngSockethubRemoteStorage","ngRemoteStorage","ngXMPPClient","ngMessages"]).config(["$routeProvider",function(a){a.when("/settings",{templateUrl:"settings.html",controller:"settingsCtrl"}).when("/",{templateUrl:"talk.html",controller:"talkCtrl"}).when("/talk/:address",{templateUrl:"talk.html",controller:"talkCtrl"}).otherwise({redirectTo:"/"})}]).run(["RemoteStorageConfig",function(a){a.modules=[["sockethub","rw",{cache:!1}],["messages","rw",{cache:!1}],["contacts","rw",{cache:!1}]]}]).run(["$rootScope","RS","$timeout",function(a,b,c){b.isConnected()||c(function(){b.isConnected()||a.$broadcast("message",{message:"remotestorage-connect",timeout:!1})},1e3)}]).run(["SockethubBootstrap",function(a){a.run({host:"silverbucket.net",port:"443",path:"/sockethub",tls:!0,secret:"1234567890"})}]).run(["SH","$rootScope","RS","XMPP","XMPPSettings",function(a,b,c,d){c.call("messages","getAccount",["xmpp","default"]).then(function(a){console.log("GOT XMPP CONFIG: ",a),void 0===a?(b.$broadcast("showModalSettingsXmpp",{message:"No existing XMPP configuration information found",locked:!1}),b.$broadcast("message",{message:"xmpp-connection",type:"error",timeout:!1})):d.connect(a).then(function(){console.log("xmpp connected")},function(a){b.$broadcast("showModalSettingsXmpp",{message:"Error connecting via XMPP "+a,locked:!1}),console.log("xmpp ERROR",a),b.$broadcast("message",{message:a,type:"error",timeout:!0})})},function(a){console.log("RS.call failed: ",a)})}]).controller("appCtrl",["$scope","$rootScope","$route","$location",function(a,b,c,d){b.$on("$routeChangeStart",function(){console.log("routeChangeStart: ",a,b,c,d)}),b.$on("$routeChangeSuccess",function(){console.log("routeChangeSuccess")}),b.$on("$routeChangeError",function(a,b,c,d){console.log("routeChangeError: ",d)})}]).controller("navCtrl",["$scope","$route","$routeParams","$location",function(a,b,c,d){a.navClass=function(a){var b=d.path().substring(1)||"home";return a===b?"active":""}}]).controller("settingsCtrl",["$scope","$route","$routeParams","$rootScope",function(a,b,c,d){a.sockethubSettings=function(){d.$broadcast("showModalSockethubSettings",{locked:!1})},a.xmppSettings=function(){d.$broadcast("showModalSettingsXmpp",{locked:!1})}}]).controller("talkCtrl",["$scope","$route","$routeParams","$location","XMPP","$rootScope","XMPPSettings",function(a,b,c,d,e,f,g){console.log("--- talkCtrl run"),a.model={presence:e.presence.data,contacts:e.contacts.data,settings:g,requests:e.requests.data},e.initListener(),a.model.currentAddress=c.address?c.address:"none",a.model.currentName=a.model.contacts[c.address]?a.model.contacts[c.address].name:"",a.model.currentConversation=a.model.contacts[c.address]?a.model.contacts[c.address].conversation:[],a.$watch("model.contacts",function(a){console.log("SCOPE WATCH CONTACTS : ",a)}),a.conversationSwitch=function(b){return console.log("---- talkCtrl.conversationSwitch("+b+")"),b!==c.address?"":(a.model.contacts[b]?(a.model.currentAddress=b,a.model.currentName=a.model.contacts[b].name,a.model.currentConversation=a.model.contacts[b].conversation,console.log("currentConversation: ",a.model.currentConversation)):console.log("talkCtrl.conversationSwitch() - not in history"),"active")},a.sendMsg=function(b){a.model.saving=!0,e.sendMsg(g.conn.actor,a.model.currentAddress,b).then(function(){a.model.sendText="",a.model.saving=!1},function(b){console.log("sendMsg error: "+b),a.model.saving=!1})},a.isFromMe=function(a){return g.conn.username===a?!0:!1},a.acceptBuddyRequest=function(b){return a.model.saving=!0,a.model.requests[b]?(console.log("settings;",g),e.requests.accept(g.conn.actor,b).then(function(){return a.model.saving=!1,delete a.model.requests[b],!0},function(){return a.model.saving=!1,!1}),void 0):(a.model.saving=!1,!1)}}]).controller("logCtrl",["$scope","$route","$routeParams","$location",function(a){a.model={message:"this is the log page fool!"}}]),angular.module("ngXMPPClient",["ngSockethubClient","ngRemoteStorage"]).value("XMPPSettings",{conn:{displayname:"",username:"",password:"",server:"jabber.org",resource:"Dogtalk",port:5222},connected:!1,env:{logo:"/res/img/xmpp-logo.png"},save:function(a,b){return this.verify(a,b)?(b.resource||(b.resource=this[a].resource),b.fullJid||(-1===b.username.indexOf("@")?b.bareJid=b.username+"@"+b.server:bareJid=b.username,b.fullJid=b.bareJid+"/"+b.resource),b.actor=b.fullJid,this[a]=b,console.log("XMPPSettings saved: "+a+": ",this[a]),!0):(console.log("XMPPSettings save failed: "+a+": ",this[a]),!1)},exists:function(a){this.verify(a,settings.conn)},verify:function(a,b){return b||(b=this[a]),"undefined"!=typeof b.displayname&&""!==b.displayname&&b.username&&""!==b.username&&b.password&&""!==b.password&&b.server&&""!==b.server&&b.port&&""!==b.port?!0:!1}}).factory("XMPP",["$rootScope","$q","SH","XMPPSettings","RS",function(a,b,c,d,e){function f(a){var f=b.defer();if(d.verify("conn",a)){d.save("conn",a);var g={};g.username=a.username,g.password=a.password,g.port=a.port,g.resource=a.resource?a.resource:"Dogtalk",g.server=a.server,g.actor={},g.actor.name=a.displayname,g.actor.address=d.conn.actor,c.set("xmpp","credentials",d.conn.actor,g).then(function(){return h(d.conn.actor,"available","",!0)}).then(function(){e.call("messages","setAccount",["xmpp","default",a]).then(function(){f.resolve()},f.reject)},function(a){f.reject(a.message)})}else f.reject("XMPP config verification failed");return f.promise}function g(){return n.state}function h(a,d,e,f){var g=b.defer();return c.submit({platform:"xmpp",verb:"update",actor:{address:a},object:{show:d,status:e,roster:f}},15e3).then(function(){n.state=d,n.statusText=e,g.resolve()},function(a){g.reject(a)}),g.promise}function i(){c.on("xmpp","message",function(a){console.log("XMPP getting message: ",a),a.actor!==d.conn.actor&&("xmpp"===a.platform&&"update"===a.verb?(l[a.actor.address]||(l[a.actor.address]={conversation:[]}),console.log("CONTACTS ADD ["+a.actor.address+"]: ",l),l[a.actor.address].address=a.actor.address,a.actor.name?l[a.actor.address].name=a.actor.name:l[a.actor.address].name||(l[a.actor.address].name=a.actor.address),a.object.state?l[a.actor.address].state=a.object.state:l[a.actor.address].state||(l[a.actor.address].state="online"),a.object.statusText?l[a.actor.address].statusText=a.object.statusText:l[a.actor.address].statusText||(l[a.actor.address].statusText=""),a.actor.name&&e.call("contacts","byKey",["impp","xmpp:"+a.actor.address]).then(function(b){0===b.length&&e.call("contacts","add",[{fn:a.actor.name,impp:"xmpp:"+a.actor.address}]).then(function(){console.log("*** contact added for "+a.actor.address)},function(b){console.log("*** contact add FAILED for "+a.actor.address,b.stack)})})):"xmpp"===a.platform&&"request-friend"===a.verb?m[a.actor.address]=a:"xmpp"===a.platform&&"send"===a.verb&&(l[a.actor.address]||(l[a.actor.address]={conversation:[]}),console.log("added to conversation stack"),l[a.actor.address].conversation.unshift(a)))})}function j(a,d,e){var f=b.defer(),g={platform:"xmpp",verb:"send",actor:{address:a},target:[{address:d}],object:{text:e}};return c.submit(g).then(function(){l[d].conversation.unshift(g),f.resolve()},function(a){f.reject(a)}),f.promise}function k(a,d){var e=b.defer(),f={platform:"xmpp",verb:"make-friend",actor:{address:a},target:[{address:d}]};return c.submit(f).then(function(){console.log("acceptBuddyRequest Success"),e.resolve()},function(a){console.log("acceptBuddyRequest ERROR ",a),e.reject(a)}),e.promise}var l={},m={},n={state:void 0,statusText:null};return{connect:f,modal:{message:""},presence:{set:h,get:g,data:n},contacts:{data:l},requests:{data:m,accept:k},initListener:i,sendMsg:j}}]).run(["$rootScope","SH","XMPP",function(a,b,c){a.$on("showModalSettingsXmpp",function(a,b){backdrop_setting=!0,"object"==typeof b&&"undefined"!=typeof b.locked&&b.locked&&(backdrop_setting="static"),console.log("backdrop: "+backdrop_setting),c.modal.message="string"==typeof b.message?b.message:void 0,$("#modalSettingsXmpp").modal({show:!0,keyboard:!0,backdrop:backdrop_setting})}),a.$on("closeModalSettingsXmpp",function(){$("#modalSettingsXmpp").modal("hide")})}]).directive("xmppSettings",["XMPP","$rootScope","XMPPSettings",function(a,b,c){return{restrict:"A",templateUrl:"xmpp-settings.html",link:function(d){d.xmpp={modal:a.modal,saving:!1,settings:c},d.xmpp.show=function(){b.$broadcast("showModalSettingsXmpp",{locked:!1})},d.xmpp.save=function(){d.xmpp.saving=!0,console.log("connecting..."),a.connect(d.xmpp.settings.conn).then(function(){d.xmpp.saving=!1,console.log("connecting SUCESS"),b.$broadcast("closeModalSettingsXmpp")},function(b){d.xmpp.saving=!1,console.log("connecting FAILED: ",b),a.modal.message=b})}}}}]).directive("contactsList",[function(){return{restrict:"E",scope:{contacts:"=",requests:"="},template:'<h4 ng-transclude></h4><div class="add-contact">  <input type="text" data-ng-model="c.name" /></div><ul class="nav nav-list nav-pills nav-stacked">  <li data-ng-repeat="r in requests">    <p><span class="username">{{ r.actor.address }}</span> </p>    <p><button class="btn btn-success pull-left" type="button"               ng-click="acceptBuddyRequest(r.actor.address)"               ng-disabled="model.saving"><span class="glyphicon glyphicon-ok"></i> Accept</button>       <div style="margin-left: 3px; display: inline;">wants to be your friend!</div>      <a class="close" href="#">&times;</a>    </p>  </li></ul><ul class="nav nav-list nav-pills nav-stacked">  <li data-ng-repeat="c in contacts | filter:c.name | orderBy:c.state"      ng-class="conversationSwitch(c.address)">    <a href="#/talk/{{c.address}}">      <span class="state {{ c.state }}"></span>     <span class="username" data-toggle="tooltip" title="{{ c.address }}">{{ c.name }}</span>    </a>  </li></ul>',transclude:!0}}]),angular.module("ngMessages",[]).directive("message",["$rootScope","$timeout",function(a,b){return{restrict:"A",template:'<div class="alert alert-{{ m.type }}" ng-show="haveMessage">  <strong>{{m.title}}</strong>   <span>{{m.message}}</span></div>',link:function(c){c.haveMessage=!1,c.m={type:"",title:"",message:""};var d={"remotestorage-connect":{type:"danger",title:"Connect to remoteStorage",message:"First things first. You must connect to your remoteStorage"},"sockethub-config":{type:"danger",title:"Sockethub configuration needed",message:"You must fill in your Sockethub connection details"},"sockethub-connect":{type:"danger",title:"Sockethub connection error",message:"Unable to connect to Sockethub please check your configuration and try again"},"sockethub-register":{type:"danger",title:"Sockethub registration problem",message:"We were unable to register with your Sockethub instance"},"xmpp-connect":{type:"danger",title:"XMPP connection failed",message:"There was a problem connecting to the XMPP server, please verify you settings"},unknown:{type:"danger",title:"An unknown error has occurred",message:""}};a.$on("message",function(a,e){console.log("message event: ",e);var f="boolean"==typeof e.timeout?e.timeout:!0;return c.haveMessage=!1,"undefined"==typeof e&&(e="no error specified"),"clear"===e.type?(c.haveMessage=!1,c.m={type:"",title:"",message:""},void 0):("undefined"!=typeof d[e.message]?c.m=d[e.message]:"string"==typeof e.message&&(c.m.title="success"===e.type?"Success":"info"===e.type?"Info":"Error",c.m.message=e.message,c.m.type=e.type),c.haveMessage=!0,f&&b(function(){c.haveMessage=!1,c.m={type:"",title:"",message:""}},4e3),void 0)})}}}]),angular.module("ngRemoteStorage",[]).value("RemoteStorageConfig",{modules:[]}).factory("RS",["$rootScope","$q","$timeout",function(a,b,c){function d(){return remoteStorage.remote.connected}var e=!1;return remoteStorage.on("ready",function(){e=!0}),{isConnected:d,call:function(e,f,g){var h=b.defer();if(console.log("RS.call("+e+", "+f+", params):",g),"object"==typeof g&&"undefined"==typeof g[0])h.reject("RS.call params must be an array");else{var i=500;!function j(){if(d())try{remoteStorage[e][f].apply(null,g).then(function(b){a.$apply(function(){h.resolve(b)})},function(b){a.$apply(function(){h.reject(b)})})}catch(b){console.log(b.stack),h.reject(b.toString())}else console.log("RS not connected yet, delaying call "+i+"s"),3e4>i&&(i+=i+500),c(j,i)}()}return h.promise}}}]).controller("remoteStorageCtrl",["RemoteStorageConfig","$scope",function(a,b){remoteStorage.disableLog(),b.$watch("RScfg.modules",function(){console.log("remoteStorageCtrl initializing modules: ",a.modules);var b,c;for(c in a.modules)b=a.modules[c],console.log("claim: "+b[0]+" a: "+b[1]),remoteStorage.access.claim(b[0],b[1]),b[2]&&"boolean"==typeof b[2].cache&&!b[2].cache&&remoteStorage.caching.disable("/"+b[0]+"/");remoteStorage.displayWidget("remotestorage-connect",{redirectUri:window.location.protocol+"//"+window.location.host+"/rscallback.html"});for(c in a.modules)b=a.modules[c],remoteStorage[b[0]]&&"function"==typeof remoteStorage[b[0]].init&&remoteStorage[b[0]].init()})}]),angular.module("ngSockethubRemoteStorage",["ngSockethubClient","ngRemoteStorage"]).run(["$rootScope","$q","$timeout","SockethubSettings","SH","RS",function(a,b,c,d,e,f){e.on("sockethub","registered",function(){console.log("Sockethub-RemoteStorage: saving sockethub config to remoteStorage ",d.conn),f.call("sockethub","writeConfig",[d.conn]).then(function(){console.log("config saved to RS")},function(b){console.log("Sockethub-RemoteStorage: Failed saving sockethub config to remoteStorage: ",b),a.$broadcast("message",{message:"failed saving sockethub config to remote storage",type:"error",timeout:!0})})})}]).factory("SockethubBootstrap",["RS","SockethubSettings","$rootScope","SH",function(a,b,c,d){function e(e){a.call("sockethub","getConfig",[""]).then(function(a){console.log("GOT SH CONFIG: ",a);var f={};e||(e={host:"localhost",port:10550,path:"/sockethub",tls:flse,secret:"1234567890"}),f="object"!=typeof a||"string"!=typeof a.host?e:a,console.log("USING SH CONFIG: ",f),b.save("conn",f)?(c.$broadcast("message",{message:"attempting to connect to sockethub",type:"info",timeout:!1}),d.connect({register:!0}).then(function(){c.$broadcast("message",{message:"connected to sockethub",type:"success",timeout:!0})},function(a){console.log("error connecting to sockethub: ",a),c.$broadcast("SockethubConnectFailed",{message:a})})):c.$broadcast("message",{message:"failed saving sockethub credentials",type:"error",timeout:!0})},function(a){console.log("RS.call error: ",a)})}return{run:e}}]),angular.module("ngSockethubClient",[]).value("SockethubSettings",{conn:{host:"localhost",port:10550,path:"/sockethub",tls:!1,secret:"1234567890"},connected:!1,env:{logo:"/res/img/sockethub-logo.svg"},save:function(a,b){return this.verify(a,b)?(this[a]=b,this[a].port=0||b.port,console.log("SH SAVE ["+a+"]: ",this[a]),!0):(console.log("SH SAVE FAILED "+a+": ",this[a]),!1)},exists:function(a){this.verify(a,settings.conn)},verify:function(a,b){return b||(b=this[a]),b.host&&""!==b.host&&b.port&&""!==b.port&&b.path&&""!==b.path&&"boolean"==typeof b.tls&&b.secret?!0:!1}}).factory("SH",["$rootScope","$q","$timeout","SockethubSettings",function(a,b,c,d){function e(){return l?l.connected:!1}function f(){return l?l.registered:!1}function g(d){var e=b.defer(),f=500;return function g(){d.testFunc()?(console.log("SH: calling: "+d.callFunc),l[d.callFunc].apply(l,d.callParams).then(function(b){a.$apply(e.resolve(b))},function(b){a.$apply(e.reject(b))})):(console.log("SH: delaying call "+f+"s"),3e4>f&&(f+=2*f),c(g,f))}(),e.promise}function h(c){console.log("ngSockethubClient.connect() ",c);var e=b.defer(),f="ws://";d.connected=!1,d.conn.tls&&(f="wss://");var g={};return c&&c.register&&(g={register:{secret:d.conn.secret}}),console.log("SOCKEHTHUB CONNECT: "+f+d.conn.host+":"+d.conn.port+d.conn.path),l=SockethubClient.connect(f+d.conn.host+":"+d.conn.port+d.conn.path,g),l.on("connected",function(){console.log("Sockethub connected"),d.connected=!0,m.connected.sockethub?a.$apply(m.connected.sockethub()):a.$apply(function(){e.resolve()})}),l.on("registered",function(){console.log("Sockethub connected & registered"),d.connected=!0,m.registered.sockethub?a.$apply(m.registered.sockethub()):a.$apply(function(){e.resolve()})}),l.on("registration-failed",function(b){console.log("Sockethub register failed ",b),a.$apply(function(){e.reject(b)})}),l.on("failed",function(b){console.log("Sockethub connection failed ",b),a.$apply(function(){e.reject("Failed connecting to sockethub at "+f+d.conn.host+":"+d.conn.port+d.conn.path)})}),l.on("disconnected",function(a){console.log("SH received disconnect(close) "+a),d.connected=!1}),l.on("message",function(b){b.platform&&m.message[b.platform]?(console.log("SH passing message to platform: "+b.platform),a.$apply(m.message[b.platform](b))):console.log("SH received message with nothing to call: ",b)}),l.on("unexpected-response",function(a){console.log("SH unexpected response: ",a)}),e.promise}function i(){var a=b.defer();return console.log("SH.register() called"),g({testFunc:e,callFunc:"register",callParams:[{secret:d.conn.secret}]}).then(a.resolve,a.reject),a.promise}function j(a,c,d,e){var h=b.defer(),i={};return i[c]={},i[c][d]=e,g({testFunc:f,callFunc:"set",callParams:[a,i]}).then(h.resolve,h.reject),h.promise}function k(a,c){var d=b.defer();return g({testFunc:f,callFunc:"sendObject",callParams:[a,c]}).then(d.resolve,d.reject),d.promise}var l,m={error:{},message:{},response:{},close:{},registered:{},connected:{}},n=function(a,b,c){m[b][a]=c};return{connect:h,register:i,isConnected:e,isRegistered:f,set:j,submit:k,on:n}}]).run(["$rootScope",function(a){a.$on("showModalSockethubSettings",function(a,b){backdrop_setting=!0,"object"==typeof b&&"undefined"!=typeof b.locked&&b.locked&&(backdrop_setting="static"),$("#modalSockethubSettings").modal({show:!0,keyboard:!0,backdrop:backdrop_setting})}),a.$on("closeModalSockethubSettings",function(){$("#modalSockethubSettings").modal("hide")})}]).directive("sockethubSettings",["SH","SockethubSettings","$rootScope",function(a,b,c){return{restrict:"A",template:'<div id="modalSockethubSettings" class="modal fade"><div class="modal-dialog"><div class="modal-content">  <div class="modal-header" style="text-align:center;">    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>    <img data-ng-src="{{ sockethub.settings.env.logo }}" width="200" ng-cloak/>  </div>  <div class="modal-body">    <form name="settingsSockethub" role="form" novalidate>      <fieldset>        <div class="form-group">          <label for="host">Hostname</label>          <div class="controls">            <input type="text" class="required form-control" name="host" placeholder="Enter hostname..." ng-model="sockethub.settings.conn.host" required>          </div>        </div>        <div class="form-group">          <label for="port">Port</label>          <div class="controls">            <input type="text" class="required form-control" name="port" placeholder="Enter port..." ng-model="sockethub.settings.conn.port" required>          </div>        </div>        <div class="form-group">          <label for="path">Path</label>          <div class="controls">            <input type="text" class="required form-control" name="path" placeholder="Enter path (if any)..." ng-model="sockethub.settings.conn.path">          </div>        </div>        <div class="form-group">          <label>            <input type="checkbox" name="tls" ng-model="sockethub.settings.conn.tls"> TLS          </label>        </div>        <div class="form-group">          <label for="secret">Secret</label>          <div class="controls">            <input type="text" class="required form-control" name="secret" placeholder="Enter secret..." ng-model="sockethub.settings.conn.secret" required>          </div>        </div>      </fieldset>    <p></p>    <div class="message-container">      <div message></div>    </div>  </div>  <div class="modal-footer">        <div class="control-group">          <div class="controls">            <button class="btn btn-primary" ng-click="sockethub.save(sockethub.settings.conn)"                     ng-disabled="!sockethub.settings.verify(\'conn\', sockethub.settings.conn) || saving">Submit</button>          </div>        </div>    </form>  </div></div></div></div>',link:function(d){d.sockethub={saving:!1,settings:b},d.sockethub.save=function(b){d.sockethub.saving=!0,d.sockethub.settings.save("conn",b),c.$broadcast("message",{message:"attempting to connect to sockethub",type:"info",timeout:!1}),a.connect({register:!0}).then(function(){d.sockethub.saving=!1,console.log("connected to sockethub"),c.$broadcast("message",{message:"connected to sockethub",type:"success",timeout:!0}),$("#modalSockethubSettings").modal("hide")},function(a){d.sockethub.saving=!1,console.log("error connection to sockethub: ",a),c.$broadcast("message",{message:a,type:"error",timeout:!1})})}}}}]);