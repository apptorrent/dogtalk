/*! built for dogtalk 2013-09-26 */
angular.module("dogtalk",["ngSockethubClient","ngSockethubRemoteStorage","ngRemoteStorage","ngXMPPClient","ngMessages"]).config(["$routeProvider",function(a){a.when("/settings",{templateUrl:"settings.html",controller:"settingsCtrl"}).when("/",{templateUrl:"talk.html",controller:"talkCtrl"}).when("/talk/:address",{templateUrl:"talk.html",controller:"talkCtrl"}).otherwise({redirectTo:"/"})}]).run(["RemoteStorageConfig",function(a){a.modules=[["sockethub","rw",{cache:!1}],["messages","rw",{cache:!1}],["contacts","rw",{cache:!1}]]}]).run(["$rootScope","RS","$timeout",function(a,b,c){b.isConnected()||c(function(){b.isConnected()||a.$broadcast("message",{message:"remotestorage-connect",timeout:!1})},1e3)}]).run(["SockethubBootstrap",function(a){a.run({host:"silverbucket.net",port:"443",path:"/sockethub",tls:!0,secret:"1234567890"})}]).run(["SH","$rootScope","RS","XMPP","XMPPSettings",function(a,b,c,d){c.call("messages","getAccount",["xmpp","default"]).then(function(a){console.log("GOT XMPP CONFIG: ",a),void 0===a?(b.$broadcast("showModalSettingsXmpp",{message:"No existing XMPP configuration information found",locked:!1}),b.$broadcast("message",{message:"xmpp-connection",type:"error",timeout:!1})):d.connect(a).then(function(){console.log("xmpp connected")},function(a){b.$broadcast("showModalSettingsXmpp",{message:"Error connecting via XMPP "+a,locked:!1}),console.log("xmpp ERROR",a),b.$broadcast("message",{message:a,type:"error",timeout:!0})})},function(a){console.log("RS.call failed: ",a)})}]).controller("appCtrl",["$scope","$rootScope","$route","$location",function(a,b,c,d){b.$on("$routeChangeStart",function(){console.log("routeChangeStart: ",a,b,c,d)}),b.$on("$routeChangeSuccess",function(){console.log("routeChangeSuccess")}),b.$on("$routeChangeError",function(a,b,c,d){console.log("routeChangeError: ",d)})}]).controller("navCtrl",["$scope","$route","$routeParams","$location",function(a,b,c,d){a.navClass=function(a){var b=d.path().substring(1)||"home";return a===b?"active":""}}]).controller("settingsCtrl",["$scope","$route","$routeParams","$rootScope","SockethubSettings","XMPP","RS",function(a,b,c,d){a.sockethubSettings=function(){d.$broadcast("showModalSockethubSettings",{locked:!1})},a.xmppSettings=function(){d.$broadcast("showModalSettingsXmpp",{locked:!1})}}]).controller("talkCtrl",["$scope","$route","$routeParams","$location","XMPP","$rootScope","XMPPSettings",function(a,b,c,d,e,f,g){console.log("--- talkCtrl run"),a.model={presence:e.presence.data,contacts:e.contacts.data,settings:g,requests:e.requests.data},e.initListener(),a.model.currentAddress=c.address?c.address:"none",a.model.currentName=a.model.contacts[c.address]?a.model.contacts[c.address].name:"",a.model.currentConversation=a.model.contacts[c.address]?a.model.contacts[c.address].conversation:[],a.$watch("model.contacts",function(a){console.log("SCOPE WATCH CONTACTS : ",a)}),a.conversationSwitch=function(b){return console.log("---- talkCtrl.conversationSwitch("+b+")"),b!==c.address?"":(a.model.contacts[b]?(a.model.currentAddress=b,a.model.currentName=a.model.contacts[b].name,a.model.currentConversation=a.model.contacts[b].conversation,console.log("currentConversation: ",a.model.currentConversation)):console.log("talkCtrl.conversationSwitch() - not in history"),"active")},a.sendMsg=function(b){a.model.saving=!0,e.sendMsg(g.conn.actor,a.model.currentAddress,b).then(function(){a.model.sendText="",a.model.saving=!1},function(b){console.log("sendMsg error: "+b),a.model.saving=!1})},a.isFromMe=function(a){return g.conn.username===a?!0:!1},a.acceptBuddyRequest=function(b){return a.model.saving=!0,a.model.requests[b]?(console.log("settings;",g),e.requests.accept(g.conn.actor,b).then(function(){return a.model.saving=!1,delete a.model.requests[b],!0},function(){return a.model.saving=!1,!1}),void 0):(a.model.saving=!1,!1)}}]).controller("logCtrl",["$scope","$route","$routeParams","$location",function(a){a.model={message:"this is the log page fool!"}}]),angular.module("ngSockethubClient",[]).value("SockethubSettings",{conn:{host:"localhost",port:10550,path:"/sockethub",tls:!1,secret:"1234567890"},connected:!1,env:{logo:"/res/img/sockethub-logo.svg"},save:function(a,b){return this.verify(a,b)?(this[a]=b,this[a].port=parseInt(b.port),console.log("SH SAVE "+a+": ",this[a]),!0):(console.log("SH SAVE FAILED "+a+": ",this[a]),!1)},exists:function(a){this.verify(a,settings.conn)},verify:function(a,b){return b||(b=this[a]),b.host&&""!==b.host&&b.port&&""!==b.port&&b.path&&""!==b.path&&"boolean"==typeof b.tls&&b.secret&&""!==b.secret?!0:!1}}).factory("SH",["$rootScope","$q","$timeout","SockethubSettings",function(a,b,c,d){function e(){return l?l.connected:!1}function f(){return l?l.registered:!1}function g(d){var e=b.defer(),f=500;return function g(){d.testFunc()?(console.log("SH: calling: "+d.callFunc),l[d.callFunc].apply(l,d.callParams).then(function(b){a.$apply(e.resolve(b))},function(b){a.$apply(e.reject(b))})):(console.log("SH: delaying call "+f+"s"),3e4>f&&(f+=2*f),c(g,f))}(),e.promise}function h(c){console.log("ngSockethubClient.connect() ",c);var e=b.defer(),f="ws://";d.connected=!1,d.conn.tls&&(f="wss://");var g={};return c&&c.register&&(g={register:{secret:d.conn.secret}}),l=SockethubClient.connect(f+d.conn.host+":"+d.conn.port+d.conn.path,g),l.on("connected",function(){console.log("Sockethub connected"),d.connected=!0,m.connected.sockethub?a.$apply(m.connected.sockethub()):a.$apply(function(){e.resolve()})}),l.on("registered",function(){console.log("Sockethub connected & registered"),d.connected=!0,m.registered.sockethub?a.$apply(m.registered.sockethub()):a.$apply(function(){e.resolve()})}),l.on("registration-failed",function(b){console.log("Sockethub register failed ",b),a.$apply(function(){e.reject(b)})}),l.on("failed",function(b){console.log("Sockethub connection failed ",b),a.$apply(function(){e.reject("Failed connecting to sockethub at "+f+d.conn.host+":"+d.conn.port+d.conn.path)})}),l.on("disconnected",function(a){console.log("SH received disconnect(close) "+a),d.connected=!1}),l.on("message",function(b){b.platform&&m.message[b.platform]?(console.log("SH passing message to platform: "+b.platform),a.$apply(m.message[b.platform](b))):console.log("SH received message with nothing to call: ",b)}),l.on("unexpected-response",function(a){console.log("SH unexpected response: ",a)}),e.promise}function i(){var a=b.defer();return console.log("SH.register() called"),g({testFunc:e,callFunc:"register",callParams:[{secret:d.conn.secret}]}).then(a.resolve,a.reject),a.promise}function j(a,c,d,e){var h=b.defer(),i={};return i[c]={},i[c][d]=e,g({testFunc:f,callFunc:"set",callParams:[a,i]}).then(h.resolve,h.reject),h.promise}function k(a,c){var d=b.defer();return g({testFunc:f,callFunc:"sendObject",callParams:[a,c]}).then(d.resolve,d.reject),d.promise}var l,m={error:{},message:{},response:{},close:{},registered:{},connected:{}},n=function(a,b,c){m[b][a]=c};return{connect:h,register:i,isConnected:e,isRegistered:f,set:j,submit:k,on:n}}]).run(["$rootScope",function(a){a.$on("showModalSockethubSettings",function(a,b){backdrop_setting=!0,"object"==typeof b&&"undefined"!=typeof b.locked&&b.locked&&(backdrop_setting="static"),$("#modalSockethubSettings").modal({show:!0,keyboard:!0,backdrop:backdrop_setting})}),a.$on("closeModalSockethubSettings",function(){$("#modalSockethubSettings").modal("hide")})}]).directive("sockethubSettings",["SH","SockethubSettings","$rootScope",function(a,b,c){return{restrict:"A",template:'<div id="modalSockethubSettings" class="modal fade"><div class="modal-dialog"><div class="modal-content">  <div class="modal-header" style="text-align:center;">    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>    <img data-ng-src="{{ settings.env.logo }}" width="200" ng-cloak/>  </div>  <div class="modal-body">    <form name="settingsSockethub" role="form" novalidate>      <fieldset>        <div class="form-group">          <label for="host">Hostname</label>          <div class="controls">            <input type="text" class="required form-control" name="host" placeholder="Enter hostname..." ng-model="settings.conn.host" required>          </div>        </div>        <div class="form-group">          <label for="port">Port</label>          <div class="controls">            <input type="text" class="required form-control" name="port" placeholder="Enter port..." ng-model="settings.conn.port" required>          </div>        </div>        <div class="form-group">          <label for="path">Path</label>          <div class="controls">            <input type="text" class="required form-control" name="path" placeholder="Enter path (if any)..." ng-model="settings.conn.path">          </div>        </div>        <div class="form-group">          <label>            <input type="checkbox" name="tls" ng-model="settings.conn.tls"> TLS          </label>        </div>        <div class="form-group">          <label for="secret">Secret</label>          <div class="controls">            <input type="text" class="required form-control" name="secret" placeholder="Enter secret..." ng-model="settings.conn.secret" required>          </div>        </div>      </fieldset>    <p></p>    <div class="message-container">      <div message></div>    </div>  </div>  <div class="modal-footer">        <div class="control-group">          <div class="controls">            <button class="btn btn-primary" ng-click="save(settings.conn)"                     ng-disabled="!settings.verify(\'conn\', settings.conn) || saving">Submit</button>          </div>        </div>    </form>  </div></div></div></div>',link:function(d){d.saving=!1,d.settings=b,d.save=function(e){d.saving=!0,b.save("conn",e),c.$broadcast("message",{message:"attempting to connect to sockethub",type:"info",timeout:!1}),a.connect({register:!0}).then(function(){d.saving=!1,console.log("connected to sockethub"),c.$broadcast("message",{message:"connected to sockethub",type:"success",timeout:!0}),$("#modalSockethubSettings").modal("hide")},function(a){d.saving=!1,console.log("error connection to sockethub: ",a),c.$broadcast("message",{message:a,type:"error",timeout:!1})})}}}}]);